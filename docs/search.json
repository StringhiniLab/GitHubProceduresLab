[
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "GitHub Lab Procedures",
    "section": "Introduction",
    "text": "Introduction\nThe use of programming languages has become an essential part of data analysis for most researchers today. In this context, a basic skill set in computer science knowledge is key to ensuring reliable and reproducible results (Wilson 2017). Although a variety of educational materials, tutorials, and recommended practices specifically designed to train researchers are available Community (2023), there is a trade-off: adopting and practicing these techniques often requires significant effort, which researchers must take from the time dedicated to studying their own disciplines.\nIn fact, one of the main barriers to sharing code at the time of publication is that scientists often do not know how to do it or have doubts about how to do it properly. Thus, the lack of training in computer science and best practices in data management impacts the reproducibility and transparency of scientific research Sharma et al. (2024). This issue is compounded by the lack of incentives from the scientific system, leading to a high number of publications in the not sharing their code despite the potential benefits of open science Xu et al. (2025)."
  },
  {
    "objectID": "index.html#where-to-start",
    "href": "index.html#where-to-start",
    "title": "GitHub Lab Procedures",
    "section": "Where to Start?",
    "text": "Where to Start?\nWe believe that the early adoption of basic tools and techniques to improve research data analysis by early-career researchers is fundamental. For this to happen, training cannot be solely individual but should also be fostered within research groups.\nThere are several advantages to this approach:\n\nEstablish minimum documentation practices\nDefining a set of group-level criteria for code and data management helps standardize documentation and facilitate exchange among researchers in the group, saving time and avoiding confusion.\nTeach where to learn more Data Science\nSupporting new members of the research group in adopting basic computational techniques from the beginning sets the stage for researchers to explore additional tools early, based on the needs of their study topics.\nFocus on domain-specific skills\nIdentifying and preselecting domain-specific computational skills can save time for new researchers.\nThis knowledge is sometimes shared in publications tailored to each discipline but is too specific to be addressed by general training courses and tutorials for scientists, being the exception for some fields Carpentries. For example, it can be established that using a tool like GitHub is necessary for sharing code or collaborating, but learning to use a tool like Bash might not be essential.\nAvoid messy projects from day one\nCentralizing data analyses on a GitHub organization and creating standards for pushing code promotes improved repository structuring, version control, and better-documented code, ensuring a baseline quality of data analysis from the project’s inception.\nEarly peer review\nSharing analyses from the beginning in private repositories shared only with team members enables peer review or feedback before publishing results. This should increase early-career researchers’ confidence when sharing the code for publication and fuel open science practices.\nMaintain the group’s research history\nThis approach helps create and standardize a historical archive of the group’s data analyses, ensuring continuity and avoiding dependence on researchers leaving behind their code and data when they move on."
  },
  {
    "objectID": "index.html#goal",
    "href": "index.html#goal",
    "title": "GitHub Lab Procedures",
    "section": "Goal",
    "text": "Goal\nThe goal of this guide is not to be an exhaustive course in data analysis but to provide the minimum necessary guidelines for new members of Dr. Silvia Stringhini’s lab to follow agreed-upon practices in data and code management."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "GitHub Lab Procedures",
    "section": "References",
    "text": "References\n\n\n\n\nAllen, Christopher, and David MA Mehler. 2019. “Open Science Challenges, Benefits and Tips in Early Career and Beyond.” PLoS Biology 17 (5): e3000246.\n\n\nCarpentries, The. “Data Carpentry.” https://datacarpentry.org/.\n\n\nCarpentry, Software. “Version Control with Git: Summary and Setup - Version Control with Git.” https://swcarpentry.github.io/git-novice/.\n\n\nClub, Our Coding. “Setting up a GitHub Repository for Your Lab - Version Control and Code Management with GitHub.” https://ourcodingclub.github.io/tutorials/git-for-labs/.\n\n\nCommunity, The Turing Way. 2023. “The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research.” Zenodo. https://doi.org/10.5281/zenodo.7625728.\n\n\nMelvin, Ryan L, Steven J Barker, Joe Kiani, and Dan E Berkowitz. 2022. “Pro-Con Debate: Should Code Sharing Be Mandatory for Publication?” Anesthesia & Analgesia 135 (2): 241–45.\n\n\nRam, Karthik. 2013. “Git Can Facilitate Greater Reproducibility and Increased Transparency in Science.” Source Code for Biology and Medicine 8: 1–8.\n\n\nSharma, Nitesh Kumar, Ram Ayyala, Dhrithi Deshpande, Yesha Patel, Viorel Munteanu, Dumitru Ciorba, Viorel Bostan, et al. 2024. “Analytical Code Sharing Practices in Biomedical Research.” PeerJ Computer Science 10: e2066.\n\n\nTazare, John, Shirley V Wang, Rosa Gini, Daniel Prieto-Alhambra, Peter Arlett, Daniel R Morales Leaver, Caroline Morton, et al. 2024. “Sharing Is Caring? International Society for Pharmacoepidemiology Review and Recommendations for Sharing Programming Code.” Pharmacoepidemiology and Drug Safety 33 (9): e5856.\n\n\nWilson, Jennifer AND Cranston, Greg AND Bryan. 2017. “Good Enough Practices in Scientific Computing.” PLOS Computational Biology 13 (6): 1–20. https://doi.org/10.1371/journal.pcbi.1005510.\n\n\nXu, Edward, Anna Catharina V. Armond, David Moher, and Kelly Cobey. 2025. “Key Challenges in Epidemiology: Embracing Open Science.” Journal of Clinical Epidemiology 178: 111618. https://doi.org/https://doi.org/10.1016/j.jclinepi.2024.111618."
  },
  {
    "objectID": "lab-design.html#statement-of-need",
    "href": "lab-design.html#statement-of-need",
    "title": "What is the lab’s policy for data and code usage?",
    "section": "Statement of Need",
    "text": "Statement of Need\nDr. Silvia Stringhini is an epidemiologist with an extensive career. She has served as the Head of the Unit of Population Epidemiology at the Geneva University Hospitals and as an Assistant Professor at the University of Geneva, Switzerland. Her main research areas include social inequalities in chronic diseases and aging, the role of health behaviors in the genesis of social health inequalities, the biological consequences of social inequalities, and the role of environmental factors in social health disparities.\nRecently, she moved her lab to the School of Population and Public Health at the University of British Columbia in Canada, where she is establishing a new team. Currently, she is in the process of welcoming new students and staff, making this an ideal time to outline how her new group will manage data and code in its publications.\nWe discussed with Dr. Stringhini the minimum data management requirements for joining the group. We reached a consensus on the following points:\n\n\n\n\n\n\n\nObjective\nWhat does the manual cover?\n\n\n\n\nCentralize copies of data analyses from all lab members\nCreate a GitHub organization\n\n\nCreation of public repositories for articles and private ones for preliminary data analyses\n- Guidelines for creating public repositories for scientific article analyses  - Guidelines for creating private repositories\n\n\nSensitive data\n- .gitignore  - Project structure including how to organize the data folder\n\n\nOnboarding\n- Create a GitHub account  - Install software"
  },
  {
    "objectID": "lab-design.html#why-use-github",
    "href": "lab-design.html#why-use-github",
    "title": "What is the lab’s policy for data and code usage?",
    "section": "Why Use GitHub?",
    "text": "Why Use GitHub?\nGit and GitHub were originally created for professional software development. However, their use has extended into the scientific field for various reasons:\n\nBackup\nMaking it a habit to push to GitHub at least once a day allows you to keep an online copy of your data analysis.\nImproved Documentation Practices\nHaving a complete README and knowing that your colleagues have access to your code encourages better organization of the project, making it clearer, more concise, and well-documented.\nVersion Control\nIt is easy to see how the project has evolved over time and recover changes from previous versions.\nReproducibility\nWhen publishing scientific articles, maintaining reproducible results is considered a quality practice.\n\nIt’s important to clarify that lab members are not expected to be expert users of Git and GitHub, but rather to handle basic commands necessary to achieve the use proposed."
  },
  {
    "objectID": "lab-design.html#notes-on-instructional-design",
    "href": "lab-design.html#notes-on-instructional-design",
    "title": "What is the lab’s policy for data and code usage?",
    "section": "Notes on Instructional Design",
    "text": "Notes on Instructional Design\nWe recognize that creating the code for a scientific publication takes time and involves numerous attempts before deciding what figures and results effectively will be published. Keeping this in mind, it was decided that each student would generate a private GitHub repository by project to maintain a backup of daily data analyses conducted in the lab. This private repository could then serve as the foundation for a public version for the final GitHub repository with the scientific article’s code. Also, publicly exposing the behind-the-scenes details of data management and analysis can be more challenging for early-career researchers, who can fear of public scrutiny of code (Gomes et al. (2022), Tazare et al. (2024)).\nMaintaining this initial private repository has other benefits besides functioning as a backup: it allows sharing the code with other lab members (as part of a GitHub lab team), makes available analyses that may not be included in the final paper but could be relevant for another publication, helps keeping a clearer project structure from the beginning and improves the overall documentation of the project.\nSpecific characteristics of the research area were also discussed (Mathur and Fox (2023)), such as handling sensitive data (Community (2023)). As a result, practices like using .gitignore and setting up a structured data folder with raw and processed sub folders were suggested to prevent private data from being pushed to GitHub and to maintain an orderly system for storing such information within the project. Also, we created a friendly for non programmers README template, to be sure that the relevant information, as the database version in use and computational environment, is captured.\nOne of the more challenging aspects to adopt is using Git, as it has multiple utilities and a considerable learning curve. Considering this, it was decided that, in this initial stage, Git and GitHub’s primary use would be to create an online and centralized backup of the projects, share repositories among team members, and manage version control instead of focusing in collaborative tools.\nSince R is the most widely used programming language in the discipline, the team decided to leverage the Git integration provided by RStudio IDE’s Git tab for committing changes and integrating students’ local work into the GitHub repositories."
  },
  {
    "objectID": "lab-design.html#future-steps",
    "href": "lab-design.html#future-steps",
    "title": "What is the lab’s policy for data and code usage?",
    "section": "Future steps",
    "text": "Future steps"
  },
  {
    "objectID": "lab-design.html#summary",
    "href": "lab-design.html#summary",
    "title": "What is the lab’s policy for data and code usage?",
    "section": "Summary",
    "text": "Summary\nMost of the databases used in our lab are private and do not contain enough data to be considered big data. These databases are used locally.\n\nIt is suggested to use a raw/ folder and a processed/ folder to separate unprocessed data from processed data.\nTo ensure that the data is not made public, it is recommended to use a .gitignore file and avoid pushing the folder where the data is stored to the repository.\nProvide a quick onboarding guide and basic data management practices for new lab members, including data analysis backup and how to maintain the privacy of datasets by having clear steps to prevent pushing data.\n\nSet guidelines on the use and management of code within the lab to facilitate sharing unpublished or complementary data analysis among current and former lab members.\n\nEstablish basic rules to publish public repositories associated with scientific articles, ensuring transparency in analyses and reproducibility of results.\n\nEnsure consistency in managing data analyses over time and preserve and centralize the knowledge generated in the different projects."
  },
  {
    "objectID": "lab-design.html#references",
    "href": "lab-design.html#references",
    "title": "What is the lab’s policy for data and code usage?",
    "section": "References",
    "text": "References\n\n\n\n\nCommunity, The Turing Way. 2023. “The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research.” Zenodo. https://doi.org/10.5281/zenodo.7625728.\n\n\nGomes, Dylan GE, Patrice Pottier, Robert Crystal-Ornelas, Emma J Hudgins, Vivienne Foroughirad, Luna L Sánchez-Reyes, Rachel Turba, et al. 2022. “Why Don’t We Share Data and Code? Perceived Barriers and Benefits to Public Archiving Practices.” Proceedings of the Royal Society B 289 (1987): 20221113.\n\n\nMathur, Maya B, and Matthew P Fox. 2023. “Toward Open and Reproducible Epidemiology.” American Journal of Epidemiology 192 (4): 658–64. https://doi.org/10.1093/aje/kwad007.\n\n\nTazare, John, Shirley V Wang, Rosa Gini, Daniel Prieto-Alhambra, Peter Arlett, Daniel R Morales Leaver, Caroline Morton, et al. 2024. “Sharing Is Caring? International Society for Pharmacoepidemiology Review and Recommendations for Sharing Programming Code.” Pharmacoepidemiology and Drug Safety 33 (9): e5856."
  },
  {
    "objectID": "roles.html#github-organization-management",
    "href": "roles.html#github-organization-management",
    "title": "Roles",
    "section": "GitHub Organization Management",
    "text": "GitHub Organization Management\n\nAdding new members: Ensure that new lab members join the GitHub Organization once they have created their GitHub account."
  },
  {
    "objectID": "roles.html#github-team-maintainer",
    "href": "roles.html#github-team-maintainer",
    "title": "Roles",
    "section": "GitHub Team Maintainer",
    "text": "GitHub Team Maintainer\nAt least one person in the lab will be assigned as the Team Maintainer of the GitHub organization. This role will allow them to add and remove members from the team, granting or revoking access to private repositories.\nFor this, it’s important to assign the Lab Member in charge the Team Maintainer role for the Lab Team.\nFollow the instructions in Assigning the team maintainer role to a team member\nIf properly assigned the label mantainer should appear next to they name in this repository: https://github.com/orgs/StringhiniLab/teams/lab-team.\n\nResponsibilities of the Maintainer 🎯\n\nAdd new lab members to the Lab Team.\nRemove team members who are no longer part of the lab.\nAssign other members as Team Maintainers if necessary."
  },
  {
    "objectID": "roles.html#references",
    "href": "roles.html#references",
    "title": "Roles",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "onboarding.html#checklist",
    "href": "onboarding.html#checklist",
    "title": "1  Onboarding",
    "section": "Checklist ✅",
    "text": "Checklist ✅\n\nCreate your personal GitHub account.\n\nRequest access to the GitHub Organization.\n\nRequest access to the Lab Team.\n\nInstall Git, R and RStudio."
  },
  {
    "objectID": "onboarding.html#create-your-personal-github-account",
    "href": "onboarding.html#create-your-personal-github-account",
    "title": "1  Onboarding",
    "section": "1.1 Create Your Personal GitHub Account 🧑‍💻",
    "text": "1.1 Create Your Personal GitHub Account 🧑‍💻\nFirst, you need to create an account on GitHub by following these steps: Creating an account on GitHub.\nAfter creating your GitHub account, you’ll notice that your profile is associated with a specific URL, structured as follows:\n\nhttps://github.com/&lt;username&gt;\n\nThis page allows you to access your account settings and all repositories you create."
  },
  {
    "objectID": "onboarding.html#request-access-to-the-github-organization",
    "href": "onboarding.html#request-access-to-the-github-organization",
    "title": "1  Onboarding",
    "section": "1.2 Request Access to the GitHub Organization 🏢",
    "text": "1.2 Request Access to the GitHub Organization 🏢\nOur lab has a GitHub organization that centralizes the repositories for everything produced in the lab.\nNotice that the organization’s URL is different from your profile’s:\n\nhttps://github.com/StringhiniLab\n\nTo gain access, you need to provide your GitHub username to the person managing the organization. Having access to the organization will enable you to create repositories within it.\n\n\n\n\n\n\nNote that you have your personal GitHub url, and also there is the url of the GitHub organization."
  },
  {
    "objectID": "onboarding.html#request-access-to-the-lab-team",
    "href": "onboarding.html#request-access-to-the-lab-team",
    "title": "1  Onboarding",
    "section": "1.3 Request Access to the Lab Team 🔑",
    "text": "1.3 Request Access to the Lab Team 🔑\nNot all lab repositories are public. To access repositories owned by other lab members, you must also be added to the Lab Team.\nDr. Stringhini, as the owner of the organization, always has access to all repositories.\n\nAdding organization members to a team\nManaging team access to an organization repository"
  },
  {
    "objectID": "onboarding.html#installation-instructions",
    "href": "onboarding.html#installation-instructions",
    "title": "1  Onboarding",
    "section": "1.4 Installation Instructions 🛠️",
    "text": "1.4 Installation Instructions 🛠️\nTo work in the lab, you will need to have Git, R, and RStudio installed.\nPlease note that the installation process may vary depending on whether you have a computer with Windows, Linux, Mac (Intel), or Mac (Apple Silicon) operating systems.\n\nGit: Download Git\n\nR: Download R\n\nRStudio: Download RStudio\n\n\n\n\n\n\n\nInstallation issues\n\n\n\nIt could happen that you get into trouble during the installation process. Remember that we are a team and that you can use Slack to share your issues and look for support 🙌\n\n\nOnce you’ve completed these steps, you can move on to the next section. 🎉"
  },
  {
    "objectID": "onboarding.html#references",
    "href": "onboarding.html#references",
    "title": "1  Onboarding",
    "section": "1.5 References",
    "text": "1.5 References\n\nBest practices for organizations"
  },
  {
    "objectID": "start-project.html#checklist",
    "href": "start-project.html#checklist",
    "title": "2  Starting a New Project",
    "section": "Checklist ✅",
    "text": "Checklist ✅\n\nCreate a private repository by new project.\n\nAdd the Lab Team to the repository.\nClone the repository and associate it with an RStudio Project.\nAdd your Data folder to .gitignore.\nComplete the README file using the template."
  },
  {
    "objectID": "start-project.html#create-a-private-repository-by-new-project",
    "href": "start-project.html#create-a-private-repository-by-new-project",
    "title": "2  Starting a New Project",
    "section": "2.1 Create a private repository by new project",
    "text": "2.1 Create a private repository by new project\nWhen starting to work on a new project, your first step is to create a private repository in the lab’s GitHub organization: StringhiniLab GitHub.\n\nClick the green New button to open a window like this:\n\n\n\nComplete/select using the following criteria:\n\n\nOwner\nSelect StringhiniLab as the owner, not your personal GitHub account.\nRepository Name\nChoose a name that represents your project. Since this repository will be private, append _private to the name.\nFor example, if the repository name is chronic-diseases, name it chronic-diseases_private.\nDescription\nProvide a more detailed description of the project here. This helps identify the repository’s content in the organization.\nPublic or Private?\nEnsure the repository is set to Private.\nInitialize Repository With\nAdd a README.md.\n\nIgnore the other options for now.\nIf everything works, you’ll see your repository within the GitHub organization labeled as Private."
  },
  {
    "objectID": "start-project.html#add-the-lab-team-to-the-repository",
    "href": "start-project.html#add-the-lab-team-to-the-repository",
    "title": "2  Starting a New Project",
    "section": "2.2 Add the Lab Team to the repository",
    "text": "2.2 Add the Lab Team to the repository\n\n\nNavigate to the repository’s Settings tab.\nIn the left-hand sidebar, find and click on Collaborators and teams.\nClick Add teams and add Lab Team.\nBy default, you will select the Read role for the team. The idea is that other Lab Members can view the repository but will not be able to edit it by mistake.\n\n\nThis allows all current Lab Members to view (but not modify) your project.\nIf you don’t want to share an analysis with other Lab Members, you can create a repository in your personal GitHub account instead. However, always ensure sensitive data is not pushed to GitHub for confidentiality reasons.\nAll repositories in StringhiniLab should be accessible to the Lab Team, which is why these repositories are hosted in the organization instead of personal accounts. Remember that individuals who are Owners of the organization can view all repositories even if there are not part of the Team."
  },
  {
    "objectID": "start-project.html#clone-the-repository-and-associate-it-with-an-rstudio-project",
    "href": "start-project.html#clone-the-repository-and-associate-it-with-an-rstudio-project",
    "title": "2  Starting a New Project",
    "section": "2.3 Clone the repository and associate it with an RStudio Project",
    "text": "2.3 Clone the repository and associate it with an RStudio Project\n\nOpen RStudio\nIf RStudio is not installed, complete first the installation instructions in the Onboarding section.\nClone the Repository\nIn RStudio:\nFile &gt; New Project &gt; Version Control &gt; Clone a Project from a Git Repository.\n\n \nGo back to the repository and copy the repository’s URL.\n\nAnd paste it in the correct field:\n\nIf successful, you’ll see a folder containing your project, including the README file that we created on GitHub, in the Files tab at the bottom-right of RStudio.\nNote that an .Rproj icon has appeared. Clicking on this icon outside of RStudio will open RStudio directly within the project.\nAdditionally, the project name now appears in the top-right corner. By opening that menu, you can easily switch between projects without leaving the RStudio IDE.\nYou’ll also notice a tab named Git in the top-right panel.\n\n\n\n2.3.1 Add your Data folder to .gitignore\nWe work with sensitive data. If working locally, create a data folder (e.g., click the + Folder icon in the Files tab). Move your data files into this folder.\nOpen the .gitignore file and add the line data/. This tells Git to ignore the contents of the data folder, preventing accidental data pushes.\nWe recommend creating at least two sub-folders within data/:\n\nraw/: Use this folder to store the original datasets.\nprocessed/: Use this folder to save any datasets generated as preliminary or final results from your analyses.\n\nIf data/ is listed in your .gitignore file, both subfolders will automatically be ignored by Git since they are located within the data/ folder.\nIf the folder is not in the project root or has a different name, adjust the .gitignore settings accordingly.\nYour project structure should look like this:\nproject-folder/ \n├── .gitignore # Specifies files and folders to ignore in version control \n├── README.md # Documentation about the project \n├── data/ # Folder to store datasets \n    ├── raw/ # Original datasets (never modified directly) │\n    └── processed/ # Cleaned and processed datasets\n\n\n\n\n\n\nWhat file to use for your analysis?\n\n\n\nThere are many files you can use for analyzing the data. You can use a basic R script, or files as RMarkdown and its more current version Quarto, that allow you to merge the code with blocks of text.\n\n\nand you .gitignore file should look like this:\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\n/.quarto/\ndata/"
  },
  {
    "objectID": "start-project.html#complete-the-readme-using-the-template",
    "href": "start-project.html#complete-the-readme-using-the-template",
    "title": "2  Starting a New Project",
    "section": "2.4 Complete the README using the template",
    "text": "2.4 Complete the README using the template\nBefore starting work, fill out the README.md file with the following information:\n# Title\n\n## Author  \n**Name:** [Your Name]  \n**Email:** [Your Name]\n\n## Start Date  \n[YYYY-MM-DD]  \n\n## Objective  \nThe objective of this project is to ...  \n\n## Database Used and Version  \n**Database Name:** [Name]\n**Data Version:** [Specify version or date accessed]  \n\n-[] Sensitive data is stored locally and excluded from version control using `.gitignore.`\n-[] All analyses comply with the data use agreements.\n\n## Project Structure  \n\nchronic-diseases/\n├── data/ # Folder for datasets\n│ ├── raw/ # Original datasets (never modified directly)\n│ └── processed/ # Cleaned and processed datasets\n├── scripts/ # R scripts for analysis\n├── outputs/ # Figures, tables, and other results\n├── README.md # Project overview and documentation\n└── .Rproj # RStudio project file\n\n\n## Reproducibility\n\nsessionInfo()\n\nThere is more material available on organizing project structures Eugene Barsky, using .gitignore (theturingwayKeepingSensitive?) or other resources listed here, or creating good README files (The Turing Way - Readme File) and name conventions Eugene Barsky if you want to explore further.\nNow you’re ready to start writing code! 🎉"
  },
  {
    "objectID": "start-project.html#references",
    "href": "start-project.html#references",
    "title": "2  Starting a New Project",
    "section": "2.5 References",
    "text": "2.5 References\n\n\n\n\nEugene Barsky, Paul Lesack, Billie Hu. “Introduction — Ubc-Library-Rc.github.io.” https://ubc-library-rc.github.io/rdm/."
  },
  {
    "objectID": "dailytasks.html#checklist",
    "href": "dailytasks.html#checklist",
    "title": "3  Regular Project Workflow",
    "section": "Checklist ✅",
    "text": "Checklist ✅\n\nAdd all the files you want to commit to the staging area.\n\nCreate a commit message.\n\nPush the changes to the GitHub repository."
  },
  {
    "objectID": "dailytasks.html#how-to-use-the-git-tab-in-rstudio",
    "href": "dailytasks.html#how-to-use-the-git-tab-in-rstudio",
    "title": "3  Regular Project Workflow",
    "section": "3.1 How to use the Git tab in RStudio",
    "text": "3.1 How to use the Git tab in RStudio\nPay attention to the Git tab located in the top-right corner. Git will only display files that have been added, modified, or deleted since the project was initialized or since the last commit (we’ll cover what that means shortly).\nKeep in mind that when we cloned the project from GitHub, two new files were added:\n\nThe .Rproj file, created because we based our RStudio project on the repository.\n\nThe .gitignore file, automatically generated as part of the project setup in RStudio.\n\nThese files will appear with a yellow question mark, indicating they are untracked—in other words, Git is aware of them but has not yet saved them under version control.\nThe README.md file initially did not appear in the Git tab. However, after adding the template and saving the changes, it now shows a blue “M,” which indicates that the file has been modified.\nIf you were to remove a file, you would see it next to a red ‘D’, indicating that it has been deleted from the project.\n\nThe next step is to save these changes in the project and add a descriptive title. Each time you save a new version of the project, we say you are making a commit, which you label with a title.\n\n3.1.1 Add all the files you want to commit to the staging area.\nThe first thing you need to do is check in the Staged section of the Git tab all the changes you want to save under the same title. You will notice that sometimes a green ‘A’ appears. You can ignore this. The important part is that you check all the changes you want to save.\nIn our case, since we are working with non-collaborative repositories and the main purpose of using GitHub is to share data with other coworkers and maintain a backup, there’s no need to focus too much on the details in this section.\n\n\n\n3.1.2 Create a commit message.\nAfter doing this, you need to click the commit button to make these changes permanent in the project. You will then choose a message for the commit and click the Commit button.\n\n\nHow Often Should You Commit?\nThink of commits as checkpoints for related changes. If you might want to revert a set of changes later, commit them together."
  },
  {
    "objectID": "dailytasks.html#push-the-changes-to-the-github-repository.",
    "href": "dailytasks.html#push-the-changes-to-the-github-repository.",
    "title": "3  Regular Project Workflow",
    "section": "3.2 Push the changes to the GitHub repository.",
    "text": "3.2 Push the changes to the GitHub repository.\nFinally, to push the changes to GitHub, click the Push button.\n\nYou’ll notice that the files in the Git tab disappear after you commit. This is expected, as Git only tracks changes between commits. Remember, if you don’t click the green arrow representing push, the changes will not take effect on GitHub.\nIf everything went smoothly, you should navigate to the repository URL and see the changes you made.\n\nHow Often Should You Push?\nPush your changes at least once a day after completing your work.\n\n\n\n\n\n\n\nMoving foward with Git and GitHUb\n\n\n\nIf you want to learn more about Git and GitHub, we recommend the following books and tutorials Carpentry, Bryan (2018), Club, Tiffany Timbers and Lee, (theturingwayGettingStarted?)\nAdditionally, UBC Library offers some basic data management courses that might be helpful to you: Short courses"
  },
  {
    "objectID": "dailytasks.html#references",
    "href": "dailytasks.html#references",
    "title": "3  Regular Project Workflow",
    "section": "3.3 References",
    "text": "3.3 References\n\nArticle: Research Data Management\n\n\n\n\n\nBryan, Jennifer. 2018. Happy Git and GitHub for the useR. GitHub.\n\n\nCarpentry, Software. “Version Control with Git: Summary and Setup - Version Control with Git.” https://swcarpentry.github.io/git-novice/.\n\n\nClub, Our Coding. “Setting up a GitHub Repository for Your Lab - Version Control and Code Management with GitHub.” https://ourcodingclub.github.io/tutorials/git-for-labs/.\n\n\nTiffany Timbers, Trevor Campbell, and Melissa Lee. “Chapter 12 Collaboration with Version Control | Data Science — Datasciencebook.ca.” https://datasciencebook.ca/version-control.html."
  },
  {
    "objectID": "offboarding.html",
    "href": "offboarding.html",
    "title": "4  Offboarding",
    "section": "",
    "text": "The Lab Member must be removed from the GitHub Lab Team.\n\nWhen leaving the organization, you will lose access to private repositories created by other team members but will retain access to those you created yourself."
  }
]