[
  {
    "objectID": "index.html#goal",
    "href": "index.html#goal",
    "title": "Code Management Guidelines",
    "section": "Goal",
    "text": "Goal\nThe goal of this manual is to provide the minimum necessary guidelines for new members of Dr. Silvia Stringhini’s lab to follow agreed-upon practices in code management."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Code Management Guidelines",
    "section": "Introduction",
    "text": "Introduction\nThe use of programming languages has become an essential part of data analysis for most researchers today. In this context, a basic skill set in computer science is key to ensuring reliable and reproducible results (Wilson et al. 2017; Hicks 2023; Abdill, Talarico, and Grieneisen 2024). Although a variety of educational materials, tutorials, and recommended practices specifically designed to train researchers are available (The Carpentries; Our Coding Club; The Turing Way Community; CodeRefinery Project; Sherman Center Workshops 2024), there is a trade-off: adopting and practicing these techniques often requires significant effort, taking time away from researchers’ primary fields of study (Allen and Mehler 2019; Goldsmith et al. 2021; Hicks 2023).\nOne consequence of the deficiency in training is the uncertainty researchers may have about how to write code correctly, which negatively impacts their willingness to share their analyses (Gomes et al. 2022). Thus, this results in a decrease in the number of publications with available code, impacting the reproducibility and transparency of scientific research (Gomes et al. 2022; Sharma et al. 2024). This issue is exacerbated by the lack of incentives from the scientific system, leading to a high number of publications where authors do not share their code, despite the benefits of making their code open source (Allen and Mehler 2019; Melvin et al. 2022; Bertram et al. 2023; Tazare et al. 2024; Xu et al. 2025).\nEncouraging researchers to actively adopting best practices and seek training in the use of computational tools that facilitate or enhance their work is desirable and should be promoted. However, leaving code management decisions entirely in their hands could have negative consequences for a research group."
  },
  {
    "objectID": "index.html#ten-reasons-to-define-code-management-practices-from-day-one",
    "href": "index.html#ten-reasons-to-define-code-management-practices-from-day-one",
    "title": "Code Management Guidelines",
    "section": "Ten reasons to define code management practices from day one",
    "text": "Ten reasons to define code management practices from day one\nWould the problem be solved if future new members of the lab arrived with better training in data science? No. We believe the research group should still define its priorities when it comes to managing code.\nThere are several benefits to defining clear minimum guidelines and basic computational skills from the moment new members join the lab:\n\nAvoid messy projects from the start.\nCentralizing data analyses on a GitHub Organization and creating standards for pushing code promotes improved repository structuring, version control, and better-documented code, ensuring reproducibility from the project’s inception.\nImplement minimum documentation and project management best practices.\nDefining group-level criteria for code and data management facilitates collaboration, saving time and avoiding errors.\nFocus on domain-specific skills first.\nIdentifying domain-specific computational skills can save time for new researchers.\nThis knowledge is sometimes shared in publications tailored to each discipline but is too specific to be addressed by general training courses and tutorials for scientists, being the only exception we know Data Carpentry (Data Carpentry 2024).\nEarly peer review.\nSharing analyses with team members in private repositories allows for valuable feedback. Although initially restricted, this practice fosters confidence in making code publicly accessible upon publication.\nDefine a consistent set of practices from all the different schools of thought. Different educational materials and training tutorials offer diverse sets of good management practices. Researchers, coming from varied backgrounds, may adopt practices they deem best. Therefore, providing clear guidelines on expectations and methodologies ensures consistency in management practices throughout the project.\nMore efficient use of time. Taking a workshop on a computational tool may occur at an advanced stage of the project. As a result, decisions about code organization, documentation, and file structure could have been made more effectively from the beginning, saving valuable time.\nMaintain the group’s research history.\nThis approach helps create and standardize a historical archive of the group’s data analyses, ensuring continuity and avoiding dependence on researchers leaving behind their code and data when they move on.\nFacilitate exchange of ideas about data and code management among team members. Creating guidelines helps build a body of knowledge that can be improved over time with contributions from students/researchers, allowing for discussions on which practices should be added, prioritized and/or removed.\nMake informed decisions about what to learn next.\nA researcher may hear that they should learn to use GitHub. By explaining from the beginning what GitHub is and the minimum knowledge required, it becomes easier for them to assess if they should focus on learning additional skills or not. Supporting new members of the research group in adopting basic computational techniques from the start lowers the barrier for researchers to explore other tools early.\nAdoption of open science practices. If the group aims to begin making research code available, these guidelines and training will effectively promote leaving the code open source.\n\n\n\n\n\n\n\nHow to cite this book?\n\n\n\nD’Andrea, F., & Stringhini, S. Code Management Guidelines: R and GitHub Starter Kit for New Team Members. https://github.com/StringhiniLab/GitHubProceduresLab. Available at: https://stringhinilab.github.io/GitHubProceduresLab/ DOI: https://doi.org/10.5281/zenodo.14510774"
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Code Management Guidelines",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nWe thank Kelvin Lee for their time and thoughtful feedback. Their insights and suggestions have improved the quality of this manual."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Code Management Guidelines",
    "section": "References",
    "text": "References\n\n\n\n\nAbdill, Richard, Emma Talarico, and Laura Grieneisen. 2024. “A How-to Guide for Code Sharing in Biology.” PLoS Biology 22 (9): e3002815.\n\n\nAllen, Christopher, and David MA Mehler. 2019. “Open Science Challenges, Benefits and Tips in Early Career and Beyond.” PLoS Biology 17 (5): e3000246.\n\n\nBertram, Michael G, Josefin Sundin, Dominique G Roche, Alfredo Sánchez-Tójar, Eli SJ Thoré, and Tomas Brodin. 2023. “Open Science.” Current Biology 33 (15): R792–97.\n\n\nCodeRefinery Project. “CodeRefinery Lessons.” https://coderefinery.org/lessons/.\n\n\nData Carpentry. 2024. “Data Carpentry.” https://datacarpentry.org/. 2024.\n\n\nGoldsmith, Jeff, Yifei Sun, Linda Fried, Jeannette Wing, Gary W Miller, and Kiros Berhane. 2021. “The Emergence and Future of Public Health Data Science.” Public Health Reviews 42: 1604023.\n\n\nGomes, Dylan GE, Patrice Pottier, Robert Crystal-Ornelas, Emma J Hudgins, Vivienne Foroughirad, Luna L Sánchez-Reyes, Rachel Turba, et al. 2022. “Why Don’t We Share Data and Code? Perceived Barriers and Benefits to Public Archiving Practices.” Proceedings of the Royal Society B 289 (1987): 20221113.\n\n\nHicks, Daniel J. 2023. “Open Science, the Replication Crisis, and Environmental Public Health.” Accountability in Research 30 (1): 34–62. https://doi.org/10.1080/08989621.2023.1962713.\n\n\nMelvin, Ryan L, Steven J Barker, Joe Kiani, and Dan E Berkowitz. 2022. “Pro-Con Debate: Should Code Sharing Be Mandatory for Publication?” Anesthesia & Analgesia 135 (2): 241–45.\n\n\nOur Coding Club. “Setting up a GitHub Repository for Your Lab - Version Control and Code Management with GitHub.” https://ourcodingclub.github.io/tutorials/git-for-labs/.\n\n\nSharma, Nitesh Kumar, Ram Ayyala, Dhrithi Deshpande, Yesha Patel, Viorel Munteanu, Dumitru Ciorba, Viorel Bostan, et al. 2024. “Analytical Code Sharing Practices in Biomedical Research.” PeerJ Computer Science 10: e2066.\n\n\nSherman Center Workshops. 2024. “Best Practices for Managing Your Code and Scripts You Use to Generate Your Research.” https://learn.scds.ca/dr23-24/code-best-practices.html.\n\n\nTazare, John, Shirley V Wang, Rosa Gini, Daniel Prieto-Alhambra, Peter Arlett, Daniel R Morales Leaver, Caroline Morton, et al. 2024. “Sharing Is Caring? International Society for Pharmacoepidemiology Review and Recommendations for Sharing Programming Code.” Pharmacoepidemiology and Drug Safety 33 (9): e5856.\n\n\nThe Carpentries. “WebPage. The Carpentries Teaches Foundational Coding and Data Science Skills to Researchers Worldwide.” https://carpentries.org/.\n\n\nThe Turing Way Community. “The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research.” Zenodo. https://doi.org/10.5281/zenodo.7625728.\n\n\nWilson, Greg, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt, and Tracy K. Teal. 2017. “Good Enough Practices in Scientific Computing.” PLOS Computational Biology 13 (6): 1–20. https://doi.org/10.1371/journal.pcbi.1005510.\n\n\nXu, Edward, Anna Catharina V. Armond, David Moher, and Kelly Cobey. 2025. “Key Challenges in Epidemiology: Embracing Open Science.” Journal of Clinical Epidemiology 178: 111618. https://doi.org/https://doi.org/10.1016/j.jclinepi.2024.111618."
  },
  {
    "objectID": "lab-design.html#who-are-we-and-what-do-we-need",
    "href": "lab-design.html#who-are-we-and-what-do-we-need",
    "title": "What are the lab’s basic guidelines for data and code usage?",
    "section": "Who are we, and what do we need?",
    "text": "Who are we, and what do we need?\nDr. Silvia Stringhini is an epidemiologist with an extensive career. She has served as the Head of the Unit of Population Epidemiology at the Geneva University Hospitals. Her main research areas include social inequalities in chronic diseases and aging, the role of health behaviors in the genesis of social health inequalities, the biological consequences of social inequalities, and the role of environmental factors in social health disparities.\nRecently, she moved her lab to the School of Population and Public Health at the University of British Columbia in Canada, where she is establishing a new team. She is in the process of welcoming new students and staff, making this an ideal time to outline how her new group will manage data and code in its publications.\nWe discussed with Dr. Stringhini the minimal requirements regarding code management that someone joining the lab should learn. A summary of the agreements reached and how they influenced the creation of this manual can be found in Table 1. Many of these requirements focus on creating a GitHub Organization for the lab.\n\n\n\n\n\n\nDefinitions: Git, GitHub and GitHub Organization\n\n\n\nGit is a tool that helps you track changes to your files, like a digital history of your work.\nGitHub is an online platform that uses Git to store files and manage changes, collaborate with others, and manage your code in a centralized location. It’s like having a shared folder with built-in tools to see what’s been changed and by whom. Each project can be stored in its own repository.\nA GitHub organization is a group on GitHub that allows teams to collaborate and manage repositories together.\n\n\n\n\nTable 1: Book content overview. This table presents the benefits and selected topics included in the book to guide the team on each prioritized action.\n\n\nAction\nBenefit\nWhat does this book cover?\n\n\n\n\nCentralize the data analysis of the group in a GitHub organization\nPreserve copies of the group’s data analyses\n- Steps to create a GitHub account and be added to the lab’s organization  - How to create a GitHub repository\n\n\nAvoid sending confidential data to GitHub\nProtection of sensitive data\n- Use of .gitignore  - Project structure recommendations including how to organize the data folder\n\n\nSelect R as the primary programming language and RStudio as the IDE\nStandardize the software used in the lab\n- Installation instructions  - Recommendations on learning resources and good practices\n\n\nShare a copy of each lab member’s analyses in a private GitHub repository\n- Create an initial version of the project that is organized and minimally documented so another lab member can understand it  - Foster the habit of performing code backups  - Receive feedback from colleagues early in the project development  - Have access to analyses from other lab members that have not been published\n- How to create a private GitHub repository and what information to include  - Basic information to include in the README  - Creating a GitHub team and defining procedures to manage access to private repositories  - Develop a basic workflow for everyday use of Git and GitHub.\n\n\nStore the code associated with scientific publications publicly in a GitHub repository\nThe benefits of leaving code open source Bertram et al. (2023).\nThis section will be developed at the time of the first paper’s publication\n\n\n\n\nAdditionally, considering the lab’s long-term evolution, onboarding and offboarding procedures were defined."
  },
  {
    "objectID": "lab-design.html#justification",
    "href": "lab-design.html#justification",
    "title": "What are the lab’s basic guidelines for data and code usage?",
    "section": "Justification",
    "text": "Justification\nWe recognize that creating the code for a scientific publication takes time and involves numerous attempts before deciding what figures and results effectively will be published. Keeping this in mind, it was decided that each student would generate a private GitHub repository by project to maintain a backup of daily data analyses conducted in the lab. This private repository could then serve as the foundation for a public version for the final GitHub repository with the scientific article’s code. Publicly sharing the code and data management process can be more challenging for early-career researchers (Gomes et al. 2022; Tazare et al. 2024).\nMaintaining this initial private repository has other benefits in addition to functioning as a backup: it allows sharing the code with other lab members (as part of a GitHub lab team), makes available analyses that may not be included in the final paper but could be relevant for another publication, helps keeping a clearer project structure from the beginning and improves the overall documentation of the project.\nCharacteristics specific to the research area were discussed, including handling sensitive data (Mathur and Fox 2023; The Turing Way Community). As a result, practices like using .gitignore and and creating a data/ folder with raw/ and processed/ sub folders were suggested to prevent private data from being pushed to GitHub and to maintain an orderly system for storing such information within the project. Also, we created a README template designed to be accessible to non-programmers to be sure that the relevant information, as the database version in use and computational environment, is captured.\n\n\n\n\n\n\nWhat is a .gitignore file\n\n\n\nA .gitignore file is a special file used in Git repositories to specify which files and directories should be ignored, meaning they won’t be tracked or included in version control. This is useful for excluding temporary files, sensitive data, or files that shouldn’t be shared with others.\n\n\nOne of the more challenging aspects to adopt is using Git, as it has multiple utilities and a considerable learning curve. Considering this, it was decided that, in this initial stage, Git and GitHub’s primary use would be to create an online and centralized backup of the projects, share repositories among team members, and manage version control instead of focusing in collaborative tools.\nSince R is the most widely used programming language in the discipline, the team decided to leverage the Git integration provided by RStudio’s Git tab for integrating students’ local work into the GitHub repositories.\n\n\n\n\n\n\nWhat is the difference between R and RStudio?\n\n\n\nR is a programming language and software environment used for statistical computing and data analysis.\nRStudio is an integrated development environment (IDE) for R, providing a user-friendly interface with tools for writing, editing, and running R code, as well as visualizing data and managing projects."
  },
  {
    "objectID": "lab-design.html#references",
    "href": "lab-design.html#references",
    "title": "What are the lab’s basic guidelines for data and code usage?",
    "section": "References",
    "text": "References\n\n\n\n\nBertram, Michael G, Josefin Sundin, Dominique G Roche, Alfredo Sánchez-Tójar, Eli SJ Thoré, and Tomas Brodin. 2023. “Open Science.” Current Biology 33 (15): R792–97.\n\n\nGomes, Dylan GE, Patrice Pottier, Robert Crystal-Ornelas, Emma J Hudgins, Vivienne Foroughirad, Luna L Sánchez-Reyes, Rachel Turba, et al. 2022. “Why Don’t We Share Data and Code? Perceived Barriers and Benefits to Public Archiving Practices.” Proceedings of the Royal Society B 289 (1987): 20221113.\n\n\nMathur, Maya B, and Matthew P Fox. 2023. “Toward Open and Reproducible Epidemiology.” American Journal of Epidemiology 192 (4): 658–64. https://doi.org/10.1093/aje/kwad007.\n\n\nTazare, John, Shirley V Wang, Rosa Gini, Daniel Prieto-Alhambra, Peter Arlett, Daniel R Morales Leaver, Caroline Morton, et al. 2024. “Sharing Is Caring? International Society for Pharmacoepidemiology Review and Recommendations for Sharing Programming Code.” Pharmacoepidemiology and Drug Safety 33 (9): e5856.\n\n\nThe Turing Way Community. “The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research.” Zenodo. https://doi.org/10.5281/zenodo.7625728."
  },
  {
    "objectID": "roles.html#github-organization-manager",
    "href": "roles.html#github-organization-manager",
    "title": "Defining roles",
    "section": "GitHub Organization Manager",
    "text": "GitHub Organization Manager\nThe Owner of the organization can add new members. Ensure that new lab members join the GitHub Organization. Follow the instructions on how to do it in Inviting users to join your organization.\n\n\n\n\n\n\nYou will need to wait for the new member to create a GitHub account before you can add them. They should share their username with you.\n\n\n\n\nResponsibilities 🎯\n\nAdd new lab members to the GitHub Organization."
  },
  {
    "objectID": "roles.html#github-team-maintainer",
    "href": "roles.html#github-team-maintainer",
    "title": "Defining roles",
    "section": "GitHub Team Maintainer",
    "text": "GitHub Team Maintainer\nAt least one person in the lab will be assigned as the Team Maintainer of the GitHub organization. This role will allow them to add and remove members from the team, granting or revoking access to private repositories.\nFor this, it’s important to assign the Lab Member in charge the Team Maintainer role for the Lab Team.\nFollow the instructions in Assigning the team maintainer role to a team member\nIf properly assigned the label maintainer should appear next to their name in this repository: https://github.com/orgs/StringhiniLab/teams/lab-team.\n\nResponsibilities 🎯\n\nAdd new lab members to the Lab Team.\nRemove team members who are no longer part of the lab.\nAssign other members as Team Maintainers if necessary."
  },
  {
    "objectID": "onboarding.html#checklist",
    "href": "onboarding.html#checklist",
    "title": "1  Onboarding",
    "section": "Checklist ✅",
    "text": "Checklist ✅\n\nCreate your personal GitHub account.\n\nRequest access to the GitHub Organization.\n\nRequest access to the Lab Team.\n\nInstall Git, R and RStudio."
  },
  {
    "objectID": "onboarding.html#create-your-personal-github-account",
    "href": "onboarding.html#create-your-personal-github-account",
    "title": "1  Onboarding",
    "section": "1.1 Create Your Personal GitHub Account 🧑‍💻",
    "text": "1.1 Create Your Personal GitHub Account 🧑‍💻\nFirst, you need to create an account on GitHub by following these steps: Creating an account on GitHub.\nAfter creating your GitHub account, you’ll notice that your profile is associated with a specific URL, structured as follows:\n\nhttps://github.com/&lt;username&gt;\n\nThis page allows you to access your account settings and all repositories you create."
  },
  {
    "objectID": "onboarding.html#request-access-to-the-github-organization",
    "href": "onboarding.html#request-access-to-the-github-organization",
    "title": "1  Onboarding",
    "section": "1.2 Request Access to the GitHub Organization 🏢",
    "text": "1.2 Request Access to the GitHub Organization 🏢\nOur lab has a GitHub organization that centralizes the repositories for everything produced in the lab.\nNotice that the organization’s URL is different from your profile’s:\n\nhttps://github.com/StringhiniLab\n\nTo gain access, you need to provide your GitHub username to the person managing the organization. Having access to the organization will enable you to create repositories within it.\n\n\n\n\n\n\nNote that you have your personal GitHub url, and also there is the url of the GitHub organization."
  },
  {
    "objectID": "onboarding.html#request-access-to-the-lab-team",
    "href": "onboarding.html#request-access-to-the-lab-team",
    "title": "1  Onboarding",
    "section": "1.3 Request Access to the Lab Team 🔑",
    "text": "1.3 Request Access to the Lab Team 🔑\nNot all lab repositories are public. To access repositories owned by other lab members, you must also be added to the Lab Team.\nDr. Stringhini, as the owner of the organization, always has access to all repositories.\n\nAdding organization members to a team\nManaging team access to an organization repository"
  },
  {
    "objectID": "onboarding.html#installation-instructions",
    "href": "onboarding.html#installation-instructions",
    "title": "1  Onboarding",
    "section": "1.4 Installation Instructions 🛠️",
    "text": "1.4 Installation Instructions 🛠️\nTo work in the lab, you will need to have Git, R, and RStudio installed.\nPlease note that the installation process may vary depending on whether you have a computer with Windows, Linux, Mac (Intel chip), or Mac M1, M2 and M3 (Apple Silicon chip) operating systems.\n\nGit: Download Git\nYou can read more about options on how to install Git in the book Happy Git and GitHub for the useR (Bryan and Hester 2024)\nR: Download R\n\nRStudio: Download RStudio\nIf you want to read some more details about basic use of R and RStudio you can read the preqrequisites section of the book R for Data Science (Wickham and Grolemund 2024)\n\n\n\n\n\n\n\nInstallation issues\n\n\n\nIt could happen that you find issues during the installation process. Remember that we are a team and that you can use Slack to share the problem and look for support 🙌"
  },
  {
    "objectID": "onboarding.html#references",
    "href": "onboarding.html#references",
    "title": "1  Onboarding",
    "section": "References",
    "text": "References\n\n\n\n\nBryan, Jennifer, and Jim Hester. 2024. Happy Git and GitHub for the useR. https://happygitwithr.com/.\n\n\nWickham, Hadley, and Garrett Grolemund. 2024. R for Data Science. https://r4ds.hadley.nz/."
  },
  {
    "objectID": "start-project.html#checklist",
    "href": "start-project.html#checklist",
    "title": "2  Starting a New Project",
    "section": "Checklist ✅",
    "text": "Checklist ✅\n\nCreate a private repository by new project.\n\nAdd the Lab Team to the repository.\nClone the repository and associate it with an RStudio Project.\nAdd your Data folder to .gitignore.\nComplete the README file using the template.\n\n\n\n\n\n\n\n\nThe most comprehensive book on using Git and GitHub for R users is Happy Git and GitHub for the useR (Bryan and Hester 2024)"
  },
  {
    "objectID": "start-project.html#create-a-private-repository-by-new-project",
    "href": "start-project.html#create-a-private-repository-by-new-project",
    "title": "2  Starting a New Project",
    "section": "2.1 Create a private repository by new project",
    "text": "2.1 Create a private repository by new project\nWhen starting to work on a new project, your first step is to create a private repository in the lab’s GitHub organization: StringhiniLab GitHub.\n\nClick the green New button to open a window like this:\n\n\n\nComplete/select using the following criteria:\n\n\nOwner\nSelect StringhiniLab as the owner, not your personal GitHub account.\nRepository Name\nChoose a name that represents your project. Since this repository will be private, append _private to the name.\nFor example, if the repository name is chronic-diseases, name it chronic-diseases_private.\nDescription\nProvide a more detailed description of the project here. This helps identify the repository’s content in the organization.\nPublic or Private?\nEnsure the repository is set to Private.\nInitialize Repository With\nAdd a README.md.\n\nIgnore the other options for now.\nIf everything works, you’ll see your repository within the GitHub organization labeled as Private."
  },
  {
    "objectID": "start-project.html#add-the-lab-team-to-the-repository",
    "href": "start-project.html#add-the-lab-team-to-the-repository",
    "title": "2  Starting a New Project",
    "section": "2.2 Add the Lab Team to the repository",
    "text": "2.2 Add the Lab Team to the repository\n\n\nNavigate to the repository’s Settings tab.\nIn the left-hand sidebar, find and click on Collaborators and teams.\nClick Add teams and add Lab Team.\nBy default, you will select the Read role for the team. The idea is that other Lab Members can view the repository but will not be able to edit it by mistake.\n\n\nThis allows all current Lab Members to view (but not modify) your project.\nIf you don’t want to share an analysis with other Lab Members, you can create a repository in your personal GitHub account instead. However, always ensure sensitive data is not pushed to GitHub for confidentiality reasons.\nAll repositories in StringhiniLab should be accessible to the Lab Team, which is why these repositories are hosted in the organization instead of personal accounts. Remember that individuals who are Owners of the organization can view all repositories even if there are not part of the Team."
  },
  {
    "objectID": "start-project.html#clone-the-repository-and-associate-it-with-an-rstudio-project",
    "href": "start-project.html#clone-the-repository-and-associate-it-with-an-rstudio-project",
    "title": "2  Starting a New Project",
    "section": "2.3 Clone the repository and associate it with an RStudio Project",
    "text": "2.3 Clone the repository and associate it with an RStudio Project\n\n\n\n\n\n\nBefore start using RStudio:\n\n\n\nWe recommend changing the default option Restore .RData into workspace at startup as explained in this section. (Posit 2024)\n\n\n\nOpen RStudio\nIf RStudio is not installed, complete first the installation instructions in the Onboarding section.\nClone the Repository\nIn RStudio:\nFile &gt; New Project &gt; Version Control &gt; Clone a Project from a Git Repository.\n\n \nGo back to the repository and copy the repository’s URL.\n\nAnd paste it in the correct field:\n\nIf successful, you’ll see a folder containing your project, including the README file that we created on GitHub, in the Files tab at the bottom-right of RStudio.\nNote that an .Rproj icon has appeared. Clicking on this icon outside of RStudio will open RStudio directly within the project.\nAdditionally, the project name now appears in the top-right corner. By opening that menu, you can easily switch between projects without leaving the RStudio IDE.\nYou’ll also notice a tab named Git in the top-right panel.\n\n\n\n\n\n\n\nDo you want to learn more about the use of RStudio and how to create projects?\n\n\n\n\nCheck the RStudio IDE User Guide (Posit 2024)\nRead the Projects section in Chapter 6 of R for Data Science (Wickham and Grolemund 2024)\n\n\n\n\n\n2.3.1 Add your Data folder to .gitignore\nWe work with sensitive data. If working locally, create a data folder (e.g., click the + Folder icon in the Files tab). Move your data files into this folder.\nOpen the .gitignore file and add the line data/. This tells Git to ignore the contents of the data folder, preventing accidental data pushes.\nWe recommend creating at least two sub-folders within data/:\n\nraw/: Use this folder to store the original datasets.\nprocessed/: Use this folder to save any datasets generated as preliminary or final results from your analyses.\n\nIf data/ is listed in your .gitignore file, both subfolders will automatically be ignored by Git since they are located within the data/ folder.\nIf the folder is not in the project root or has a different name, adjust the .gitignore settings accordingly.\nYour project structure should look like this:\nproject-folder/ \n├── .gitignore # Specifies files and folders to ignore in version control \n├── README.md # Documentation about the project \n├── data/ # Folder to store datasets \n    ├── raw/ # Original datasets (never modified directly) │\n    └── processed/ # Cleaned and processed datasets\n\n\n\n\n\n\nWhat type of document should you use for your data analysis?\n\n\n\nThere are many files you can use run your code. You can use a basic R script (Wickham and Grolemund 2024), an RMarkdown document or its more current version Quarto.\nIf you’re unsure where to start, we recommend using a Quarto Document. A Quarto document, just like RMarkdown, allows you to include code chunks throughout a text and save it as a Word, PDF, or HTML report. Combining text where you explain your reasoning and the details of the analysis with the code chunks makes it much easier to understand each section of code, both for yourself and for other readers.\n\nTo use Quarto, you must first install it\nTutorial to learn how to create a document with Quarto (Quarto Project 2024)\n\nIt’s important to note that there is a learning curve for using tools like Quarto. Creating a simple R script might be a good enough option if you’re looking to start your analysis more straightforwardly.\nWe encourage you to discuss this on the lab Slack to hear the experiences of other researchers. If any consensus emerges, feel free to open a New Issue here to improve this guide.\n\n\nand you .gitignore file should look like this:\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\ndata/"
  },
  {
    "objectID": "start-project.html#complete-the-readme-using-the-template",
    "href": "start-project.html#complete-the-readme-using-the-template",
    "title": "2  Starting a New Project",
    "section": "2.4 Complete the README using the template",
    "text": "2.4 Complete the README using the template\nBefore starting work, fill out the README.md file with the following information:\n# Title\n\n## Author  \n**Name:** [Your Name]  \n**Email:** [Your Name]\n\n## Start Date  \n[YYYY-MM-DD]  \n\n## Objective  \nThe objective of this project is to ...  \n\n## Database Used and Version  \n**Database Name:** [Name]\n**Data Version:** [Specify version or date accessed]  \n\n-[] Sensitive data is stored locally and excluded from version control using `.gitignore.`\n-[] All analyses comply with the data use agreements.\n\n## Project Structure  \n\nchronic-diseases/\n├── data/ # Folder for datasets\n│ ├── raw/ # Original datasets (never modified directly)\n│ └── processed/ # Cleaned and processed datasets\n├── scripts/ # R scripts for analysis\n├── outputs/ # Figures, tables, and other results\n├── README.md # Project overview and documentation\n└── .Rproj # RStudio project file\n\n## Reproducibility\nRun `sessionInfo()` in the console and paste the output between the two lines with backticks:\n\n```\n\n```  \n\nThere is more material available on organizing project structures (Eugene Barsky 2024), using .gitignore (The Turing Way Community) or other resources listed here, or creating good README files (The Turing Way Community) and name conventions (Eugene Barsky 2024) if you want to explore further.\nAdditionally, UBC Library offers some basic data management courses that might be helpful to you: Short courses (Eugene Barsky 2024)"
  },
  {
    "objectID": "start-project.html#references",
    "href": "start-project.html#references",
    "title": "2  Starting a New Project",
    "section": "References",
    "text": "References\n\n\n\n\nBryan, Jennifer, and Jim Hester. 2024. Happy Git and GitHub for the useR. https://happygitwithr.com/.\n\n\nEugene Barsky, Paul Lesack, Billie Hu. 2024. “Introduction to Research Data Management.” https://github.com/ubc-library-rc/rdm/.\n\n\nPosit. 2024. “RStudio IDE User Guide.” 2024. https://docs.posit.co/ide/user/.\n\n\nQuarto Project. 2024. “Hello, Quarto: Using Quarto with RStudio.” 2024. https://quarto.org/docs/get-started/hello/rstudio.html.\n\n\nThe Turing Way Community. “The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research.” Zenodo. https://doi.org/10.5281/zenodo.7625728.\n\n\nWickham, Hadley, and Garrett Grolemund. 2024. R for Data Science. https://r4ds.hadley.nz/."
  },
  {
    "objectID": "dailytasks.html#checklist",
    "href": "dailytasks.html#checklist",
    "title": "3  Regular Project Workflow",
    "section": "Checklist ✅",
    "text": "Checklist ✅\n\nAdd all the files you want to commit to the staging area.\n\nCreate a commit message.\n\nPush the changes to the GitHub repository."
  },
  {
    "objectID": "dailytasks.html#how-to-use-the-git-tab-in-rstudio",
    "href": "dailytasks.html#how-to-use-the-git-tab-in-rstudio",
    "title": "3  Regular Project Workflow",
    "section": "3.1 How to use the Git tab in RStudio",
    "text": "3.1 How to use the Git tab in RStudio\n\n\n\n\n\n\nWhy GitHub?\n\n\n\nGit and GitHub were originally created for professional software development. It’s important to clarify that lab members are not expected to be expert users of Git and GitHub, but rather to handle basic commands necessary to achieve the use proposed.\n\n\nPay attention to the Git tab located in the top-right corner. Git will only display files that have been added, modified, or deleted since the project was initialized or since the last commit (we’ll cover what that means shortly).\nKeep in mind that when we cloned the project from GitHub, two new files were added:\n\nThe .Rproj file, created because we based our RStudio project on the repository.\n\nThe .gitignore file, automatically generated as part of the project setup in RStudio.\n\nThese files will appear with a yellow question mark, indicating they are untracked—in other words, Git is aware of them but has not yet saved them under version control.\nThe README.md file initially did not appear in the Git tab. However, after adding the template and saving the changes, it now shows a blue “M,” which indicates that the file has been modified.\nIf you were to remove a file, you would see it next to a red ‘D’, indicating that it has been deleted from the project.\n\nThe next step is to save these changes in the project and add a descriptive title. Each time you save a new version of the project, we say you are making a commit, which you label with a title.\n\n3.1.1 Add all the files you want to commit to the staging area.\nThe first thing you need to do is check in the Staged section of the Git tab all the changes you want to save under the same title. You will notice that sometimes a green ‘A’ appears. You can ignore this. The important part is that you check all the changes you want to save.\nIn our case, since we are working with non-collaborative repositories and the main purpose of using GitHub is to share data with other coworkers and maintain a backup. If at any point you need to learn more, at the end of this page, there are some recommended materials that might be helpful.\n\n\n\n3.1.2 Create a commit message.\nAfter doing this, you need to click the commit button to make these changes permanent in the project. You will then choose a message for the commit and click the Commit button.\n\n\n\n\n\n\n\nHow often should you commit?\nThink of commits as checkpoints for related changes. If you might want to revert a set of changes later, commit them together."
  },
  {
    "objectID": "dailytasks.html#push-the-changes-to-the-github-repository.",
    "href": "dailytasks.html#push-the-changes-to-the-github-repository.",
    "title": "3  Regular Project Workflow",
    "section": "3.2 Push the changes to the GitHub repository.",
    "text": "3.2 Push the changes to the GitHub repository.\nFinally, to push the changes to GitHub, click the Push button.\n\nYou’ll notice that the files in the Git tab disappear after you commit. This is expected, as Git only tracks changes between commits. Remember, if you don’t click the green arrow representing push, the changes will not take effect on GitHub.\nIf everything went smoothly, you should navigate to the repository URL and see the changes you made.\n\n\n\n\n\n\nHow often should you push?\nPush your changes at least once a day after completing your work."
  },
  {
    "objectID": "dailytasks.html#moving-foward-with-git-and-github",
    "href": "dailytasks.html#moving-foward-with-git-and-github",
    "title": "3  Regular Project Workflow",
    "section": "3.3 Moving foward with Git and GitHub 📚",
    "text": "3.3 Moving foward with Git and GitHub 📚\nIf you want to learn more about Git and GitHub, we recommend the following books and tutorials:\nBooks\n\nHappy Git and GitHub for the useR book (Bryan and Hester 2024)\nChapter 12 - Collaboration with version control from the book Data Science: A First Introduction (Timbers, Campbell, and Lee 2022)\nThe Turing Way Handbook: Git for research projects (The Turing Way Community)\n\nTutorials\n\nSoftware Carpentry: Version Control with Git (Gonzalez et al. 2019)\nSetting up a GitHub Repository for Your Lab - Version Control and Code Management with GitHub (Our Coding Club)\nCode Refinery - Introduction to version control with Git (CodeRefinery Project)"
  },
  {
    "objectID": "dailytasks.html#references",
    "href": "dailytasks.html#references",
    "title": "3  Regular Project Workflow",
    "section": "References",
    "text": "References\n\n\n\n\nBryan, Jennifer, and Jim Hester. 2024. Happy Git and GitHub for the useR. https://happygitwithr.com/.\n\n\nCodeRefinery Project. “CodeRefinery Lessons.” https://coderefinery.org/lessons/.\n\n\nGonzalez, Ivan, Daisie Huang, Nima Hejazi, Katherine Koziar, and Madicken Munk. 2019. “Software Carpentry: Version Control with Git.” Edited by Ivan Gonzalez, Daisie Huang, Nima Hejazi, Katherine Koziar, and Madicken Munk. https://doi.org/10.5281/zenodo.3264950.\n\n\nOur Coding Club. “Setting up a GitHub Repository for Your Lab - Version Control and Code Management with GitHub.” https://ourcodingclub.github.io/tutorials/git-for-labs/.\n\n\nThe Turing Way Community. “The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research.” Zenodo. https://doi.org/10.5281/zenodo.7625728.\n\n\nTimbers, Tiffany, Trevor Campbell, and Melissa Lee. 2022. Data Science: A First Introduction - Version Control. Chapman and Hall/CRC. https://datasciencebook.ca/version-control.html."
  },
  {
    "objectID": "offboarding.html",
    "href": "offboarding.html",
    "title": "4  Offboarding",
    "section": "",
    "text": "The Lab Member must be removed from the GitHub Lab Team.\n\nWhen leaving the organization, you will lose access to private repositories created by other team members but will retain access to those you created yourself."
  }
]