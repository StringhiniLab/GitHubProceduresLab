**GitHub Organization**: [www.github.com/StringhiniLab](www.github.com/StringhiniLab)


## Goal {.unnumbered}

The goal of this manual is to provide the **minimum necessary guidelines** for new members of Dr. Silvia Stringhini's lab to follow agreed-upon practices in code management.

## Introduction {.unnumbered}

The use of programming languages has become an essential part of data analysis for most researchers today. In this context, a basic skill set in computer science is key to ensuring reliable and reproducible results [@bestenough; @hicks2023; @abdill2024]. Although a variety of educational materials, tutorials, and recommended practices specifically designed to train researchers are available [@carpentries; @codingclub; @turing; @coderefinery_lessons; @macmaster2024], there is a trade-off: adopting and practicing these techniques often requires significant effort, taking time away from researchers' primary fields of study [@allen2019; @goldsmith2021; @hicks2023].

One consequence of the deficiency in training is the uncertainty researchers may have about how to write code correctly, which negatively impacts their willingness to share their analyses [@gomes2022]. Thus, this results in a decrease in the number of publications with available code, impacting the reproducibility and transparency of scientific research [@gomes2022; @sharma2024]. This issue is exacerbated by the lack of incentives from the scientific system, leading to a high number of publications where authors do not share their code, despite the benefits of making their code open source [@allen2019; @melvin2022; @bertram2023; @tazare2024; @xu2025].

Encouraging researchers to actively adopting best practices and seek training in the use of computational tools that facilitate or enhance their work is desirable and should be promoted. However, leaving code management decisions entirely in their hands could have negative consequences for a research group.

## Ten reasons to implement code management practices early in a research group {.unnumbered}

Would the problem be solved if future new members of the lab arrived with better training in data science? No. We believe the research group should still define its priorities when it comes to managing code.

There are several benefits to defining clear minimum guidelines and basic computational skills from the moment new members join the lab:

1. **Set a solid foundation to avoid messy projects.**  
   Define the file formats to be used and establish a basic file structure to ensure reproducibility from the project's inception. Additionally, outline how the data will be managed and integrated into the analysis.

2. **Define a consistent set of practices from all the different schools of thought.**  
   Educational materials and training tutorials present various management practices, and researchers from different backgrounds may adopt different approaches. Therefore, providing clear guidelines ensures consistency in management practices across the projects. 

3. **Focus on domain-specific skills first.**  
   Identifying domain-specific computational skills can save time for new researchers. This knowledge is sometimes shared in publications tailored to each discipline but is too specific to be addressed by general training courses and tutorials for scientists.

4. **Early peer review.**  
   In this manual, we suggest creating private repositories that are visible only to team members. Sharing analyses within these private repositories allows for valuable feedback. This practice could help researchers gain confidence in making their code publicly accessible once published and benefit from unpublished analyses conducted in the lab.

5. **Standardize documentation practices.**  
   For example, there could be a README template that all researchers use, making it easy to understand what can be found in a repository. This saves time, facilitates access to materials for all team members, increases project reproducibility, and makes it easier to identify repositories with older analyses.

6. **Optimize time management.**  
   Taking a workshop on a computational tool may occur at an advanced stage of a project. As a result, decisions about code organization, documentation, and file structure could have been made more effectively from the beginning, saving valuable time.

7. **Maintain the group's research history.**  
   Centralizing data analyses on a repository hosting organization, such as a GitHub Organization, creates a historical archive of the groupâ€™s data analyses, ensuring continuity and avoiding dependence on researchers leaving behind their code and data when they move on.

8. **Facilitate exchange of ideas about data and code management among team members.**  
   Creating guidelines helps build a body of knowledge that can be improved over time with contributions from students/researchers, allowing for discussions on which practices should be added, prioritized, or removed.

9. **Make informed decisions about what to learn next.**  
   A researcher might hear that they need to learn Git but have no idea what this tool is for. A brief introduction to Git and clear guidance on where to begin make it easier to assess whether learning additional skills will be useful. Supporting new members in adopting basic computational techniques from the beginning lowers the barrier for researchers to explore other tools early.

10. **Adoption of open science practices.**  
   If the group embraces open science, adopting these practices early will ensure that a high percentage of the code generated remains open source.

These ten reasons can serve as a starting point for opening a discussion on how to approach these topics within the research group. Leaders do not need to be experts in software development. Guiding principal investigators to select the essential tools and practices maximizes the benefits of making key decisions for the team without requiring large investments in learning.  

At the same time, the existence of a research group manual allows younger researchers to share, propose, and contribute improvements on how the code is managed based on their expertise in the research area and the training they will receive. Eventually, the manual should include the criteria for publishing code and how to recognize the need to create a software package that can be used in the lab to facilitate the group's work.  

Finally, beyond these ten reasons, there is an additional benefit: demonstrating how software will be maintained throughout the project lifecycle strengthens the case for long-term sustainability. This transparency encourages funding agencies to invest in similar future projects.


::: {.callout-note appearance="simple"}

## How to cite this book?
D'Andrea, F., & Stringhini, S. Code Management Guidelines: R and GitHub Starter Kit for New Team Members. https://github.com/StringhiniLab/GitHubProceduresLab.
Available at: https://stringhinilab.github.io/GitHubProceduresLab/ DOI: *https://doi.org/10.5281/zenodo.14510774*

:::

## Acknowledgments

Thanks to [Kelvin Lee](https://hykelvinlee.com/) for the time and thoughtful feedback. The insights and suggestions provided have improved the quality of this manual.

## References {.unnumbered}   

