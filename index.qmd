**GitHub Organization**: [www.github.com/StringhiniLab](www.github.com/StringhiniLab)


## Goal {.unnumbered}

The goal of this manual is to provide the **minimum necessary guidelines** for new members of Dr. Silvia Stringhini's lab to follow agreed-upon practices in code management.

## Introduction {.unnumbered}

The use of programming languages has become an essential part of data analysis for most researchers today. In this context, a basic skill set in computer science is key to ensuring reliable and reproducible results [@bestenough; @hicks2023; @abdill2024]. Although a variety of educational materials, tutorials, and recommended practices specifically designed to train researchers are available [@carpentries; @codingclub; @turing; @coderefinery_lessons; @macmaster2024], there is a trade-off: adopting and practicing these techniques often requires significant effort, taking time away from researchers' primary fields of study [@allen2019; @goldsmith2021; @hicks2023].

One consequence of the deficiency in training is the uncertainty researchers may have about how to write code correctly, which negatively impacts their willingness to share their analyses [@gomes2022]. Thus, this results in a decrease in the number of publications with available code, impacting the reproducibility and transparency of scientific research [@gomes2022; @sharma2024]. This issue is exacerbated by the lack of incentives from the scientific system, leading to a high number of publications where authors do not share their code, despite the benefits of making their code open source [@allen2019; @melvin2022; @bertram2023; @tazare2024; @xu2025].

Encouraging researchers to actively adopting best practices and seek training in the use of computational tools that facilitate or enhance their work is desirable and should be promoted. However, leaving code management decisions entirely in their hands could have negative consequences for a research group.

## Ten reasons to implement code management practices early in a research group {.unnumbered}

Would the problem be solved if future new members of the lab arrived with better training in data science? No. We believe the research group should still define its priorities when it comes to managing code.

There are several benefits to defining clear minimum guidelines and basic computational skills from the moment new members join the lab:

1. **Avoid messy projects from the start**.   
   Centralizing data analyses on a GitHub Organization and creating standards for pushing code promotes improved repository structuring, version control, and better-documented code, ensuring reproducibility from the project's inception.

2. **Implement minimum documentation and project management best practices**.   
   Defining group-level criteria for code and data management facilitates collaboration, saving time and avoiding errors.

3. **Focus on domain-specific skills first**.   
   Identifying domain-specific computational skills can save time for new researchers. This knowledge is sometimes shared in publications tailored to each discipline but is too specific to be addressed by general training courses and tutorials for scientists, being the only exception we know Data Carpentry.

4. **Early peer review**.   
   In this manual, we suggest creating early private repositories that are only visible among team members. Sharing analyses with team members in private repositories allows for valuable feedback. This practice could help researchers gain confidence in making their code publicly accessible once published.

5. **Define a consistent set of practices from all the different schools of thought**.   
   Different educational materials and training tutorials offer diverse sets of good management practices. Researchers, coming from varied backgrounds, may adopt practices they deem best. Therefore, providing clear guidelines on expectations and methodologies ensures consistency in management practices throughout the project.

6. **More efficient use of time**.     
   Taking a workshop on a computational tool may occur at an advanced stage of the project. As a result, decisions about code organization, documentation, and file structure could have been made more effectively from the beginning, saving valuable time.

7. **Maintain the group's research history**.   
   This approach helps create and standardize a historical archive of the groupâ€™s data analyses, ensuring continuity and avoiding dependence on researchers leaving behind their code and data when they move on.

8. **Facilitate exchange of ideas about data and code management among team members**.     
   Creating guidelines helps build a body of knowledge that can be improved over time with contributions from students/researchers, allowing for discussions on which practices should be added, prioritized, and/or removed.

9. **Make informed decisions about what to learn next**.   
   A researcher may hear that they should learn to use GitHub. By explaining from the beginning what GitHub is and the minimum knowledge required, it becomes easier for them to assess if they should focus on learning additional skills or not. Supporting new members of the research group in adopting basic computational techniques from the start lowers the barrier for researchers to explore other tools early.

10. **Adoption of open science practices**.   
   If the group aims to begin making research code available, these guidelines and training will effectively promote leaving the code open source.

Finally, there is still an eleventh reason. By demonstrating how the software will be mantained and managed throughout the project lifecycle, we highlight long-term sustainability and encourage funding agencies to invest in similar future projects.

::: {.callout-note appearance="simple"}

## How to cite this book?
D'Andrea, F., & Stringhini, S. Code Management Guidelines: R and GitHub Starter Kit for New Team Members. https://github.com/StringhiniLab/GitHubProceduresLab.
Available at: https://stringhinilab.github.io/GitHubProceduresLab/ DOI: *https://doi.org/10.5281/zenodo.14510774*

:::

## Acknowledgments

We thank [Kelvin Lee](https://hykelvinlee.com/) for their time and thoughtful feedback. Their insights and suggestions have improved the quality of this manual.

## References {.unnumbered}   

